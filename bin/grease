#! /usr/bin/env python
import argparse
import logging
from logging import config
import os
import sys
import json
from dataclasses import replace
from tgt_grease import Runtime, Configuration

log = logging.getLogger("grease.cli")
parser = argparse.ArgumentParser()
parser.add_argument('--log-config', help='load a logging configuration file', type=str)
parser.add_argument('--config', help='load a configuration file for this node', type=str)
parser.add_argument('--context', '-c', nargs='+', help='key=value pairs for context', default='')
parser.add_argument('command', metavar='command', type=str, help='command to execute')
args = parser.parse_args()

# ensure any reserved commands (those that have their own CLI) aren't executed
if args.command in ['daemon', 'bridge']:
    log.error(f"cannot execute {args.command} use its' CLI: grease-{args.command}")
    sys.exit(1)

nodeConfig = Configuration()
if args.config:
    try:
        if os.stat(args.config):
            with open(args.config) as fil:
                updates = json.load(fil)
                nodeConfig = replace(nodeConfig, **updates)
        else:
            log.critical(f'invalid configuration [{args.config}]')
            parser.print_help()
            sys.exit(1)
    except FileNotFoundError:
        log.critical(f'logging configuration [{args.config}] not found')
        parser.print_help()
        sys.exit(1)

runtime = Runtime(nodeConfig)
if args.log_config:
    try:
        if os.stat(args.log_config):
            config.fileConfig(args.log_config)
        else:
            log.critical(f'invalid logging configuration [{args.log_config}]')
            parser.print_help()
            sys.exit(1)
    except FileNotFoundError:
        log.critical(f'logging configuration [{args.log_config}] not found')
        parser.print_help()
        sys.exit(1)

ctx = {}
try:
    ctx = Runtime.parse_data_args(args.context, "=")
except ValueError as e:
    log.critical(f"failed to parse context due to: {e}")
    sys.exit(1)

try:
    runtime.execute(args.command, ctx)
except RuntimeError as e:
    log.critical(f"failed to execute command due to error: {e}")
