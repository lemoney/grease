#! /usr/bin/env python
import argparse
import logging
from logging import config
import os
import sys
import json
from dataclasses import replace
from tgt_grease import Runtime, Configuration

log = logging.getLogger("grease.cli.daemon")
parser = argparse.ArgumentParser()
# general flags
parser.add_argument('--context', '-c', nargs='+', help='key=value pairs for context')
parser.add_argument('--log-config', help='load a logging configuration file', type=str)
parser.add_argument('--config', help='load a configuration file for this node', type=str)
subparsers = parser.add_subparsers(
    title="sub-commands",
    description="tasks able to be executed from the daemon",
    dest="sub_command",
    help='sub-command help')

# create the parser for the "start" command
parser_start = subparsers.add_parser('start', help='start the daemon')
# create the parser for the "stop" command
parser_stop = subparsers.add_parser('stop', help='stop the daemon')
# create the parser for the "restart" command
parser_restart = subparsers.add_parser('restart', help='restart the daemon')
# create the parser for the "install" command
parser_install = subparsers.add_parser('install', help='install the daemon (supports SystemD/MacOS/Windows)')
# create the parser for the "run" command
parser_run = subparsers.add_parser('run', help='run the daemon in the foreground')
args = parser.parse_args()

if not args.sub_command:
    log.error("please provide sub-command")
    parser.print_help()
    sys.exit(0)

nodeConfig = Configuration()
if args.config:
    try:
        if os.stat(args.config):
            with open(args.config) as fil:
                updates = json.load(fil)
                nodeConfig = replace(nodeConfig, **updates)
        else:
            log.critical(f'invalid configuration [{args.config}]')
            parser.print_help()
            sys.exit(1)
    except FileNotFoundError:
        log.critical(f'logging configuration [{args.config}] not found')
        parser.print_help()
        sys.exit(1)

runtime = Runtime(nodeConfig)
if args.log_config:
    try:
        if os.stat(args.log_config):
            config.fileConfig(args.log_config)
        else:
            log.critical(f'invalid logging configuration [{args.log_config}]')
            parser.print_help()
            sys.exit(1)
    except FileNotFoundError:
        log.critical(f'logging configuration [{args.log_config}] not found')
        parser.print_help()
        sys.exit(1)

ctx = {}
try:
    if args.context:
        ctx = Runtime.parse_data_args(args.context, "=")
except ValueError as e:
    log.critical(f"failed to parse context due to: {e}")
    sys.exit(1)
ctx["process"] = args.sub_command
try:
    runtime.execute("daemon", ctx)
except RuntimeError as e:
    log.critical(f"failed to execute command due to error: {e}")
